mean(c(25,10.5))
mean(c(0.06,0.72))
mean(c(0.13,6.5))
mean(c(0.71,1.4,1.37))
mean(c(0.13,0.14,0.21))
summary.lm
mean(c(0.17,0.23,0.09,0.03,0.07))
mean(c(0.86,0.43,0.66,0.6,0.66,0.86,0.18))
sum(c(52,36,3))
sum(c(52,35,3))
52/sum(c(52,35,3))
35/sum(c(52,35,3))
3/sum(c(52,35,3))
58+39
5/6
1/6
7.4/100
(7.4/100)*27
(7.4/100)*23
(7.6/100)*23
rnorm(20,19.2,3)
max(rnorm(20,19.2,3))
331.9/39
mean(c(57.5,57.8,43.4,50))
mean(c(119,125))
mean(c(c(mean(350,600)),c(mean(450,600)),c(mean(400,1000))))
mean(c(700,525,475))
mean(c(400,700))
mean(c(400,1000))
mean(c(350,600))
mean(c(450,600))
80
281/34
mean(c(42,151))
mean(c(96.5,80))
mean(70,160)
mean(150,300)
mean(c(70,160))
mean(c(150,300))
mean(c(115,225,120))
144/11
mean(c(98,51,55))
mean(c(181,247,150))
?t.test
t.test
t.test(c(c(1,2,3),c(3,4,5)))
dd <-t.test(c(c(1,2,3),c(3,4,5)))
dd
dd <-wilcox(c(c(1,2,3),c(3,4,5)))
mean(c(118,248))
32.5
mean(c(32.5,41,142.5))
mean(c(410,375,))
mean(c(370,720))
mean(c(410,375,545))
mean(c(175,325))
mean(c(200,300))
mean(c(25,40))
mean(c(32.5,50,140))
mean(c(46,19))
mean(c(325,117))
mean(c(6.4,17))
mean(c(75,90,41,60,44))
mean(c(130,250))
mean(c(127,44.4,30.4))
mean(c(214,59,176))
mean(c(27.5,15))
mean(c(41.4,20.8)
)
mean(c(mean(c(280,450)),324))
mean(c(mean(c(75,150)),49))
mean(c(mean(c(75,150)),49,47))
mean(c(44,100)
)
rnorm(8741,6,2)
max(rnorm(8741,6,2))
mean(c(75,160)
)
mean(c(80,78,85))
mean(c(10.45,6.6,5.46,7.5))
mean(c(25,20,22.5))
mean(c(14,10,10))
mean(c(114,27.5,37.5))
mean(c(13.5,8,8.5,12.5))
mean(c(8.2,7))
mean(c(8.91,5.5,7.2))
mean(c(25,11))
mean(c(2,4,4,11))
mean(c(79.7,175,184))
mean(c(175,300))
mean(c(169,mean(c(170,250))))
mean(c(0.8,0.565))
mean(c(170,260))
mean(c(50,28,35,50))
mean(c(421,425,101.9))
mean(c(120,120,150))
mean(c(0.25,2.8,1.4))
mean(c(180,225))
mean(c(30,40,30))
mean(c(18,21.2,18))
mean(c(3,41.8,24.41))
mean(c(18,19.4,15.01))
mean(c(4,7.5,2.9,18,10.8,4.41,8.14))
mean(c(0.053,0.15))
110-86
54-29
<- 1
in <- 1
install.packages("hypervolume")
require("hypervolumes")
require("hypervolume")
hypervolume
?hypervolume
v1 <- rnorm(10,0,sd=2)
v2 <- rlognorm(10,0,sd=2)
v2 <- rlog(10,0,sd=2)
?rnorm
v2 <- rlnorm(10,0,sd=2)
v2 <- r dpois(10,0,sd=2)
v3 <- rdpois(10,0,sd=2)
v3 <- rpois(10,0,sd=2)
v3 <- rpois(10,lambda=1)
v3
v1
v2
v3
v4 <- rnorm(10,1,sd=10)
z1 <- (v1-mean(v1))/sd(v1)
z2 <- (v2-mean(v2))/sd(v2)
z3 <- (v3-mean(v3))/sd(v3)
z4 <- (v4-mean(v4))/sd(v4)
data <- data.frame(c(z1,z2,z3,z4))
?hypervolume
hypervolume(data, 10, #
  quantile = 0.95, name = NULL, #
  verbose = T, warnings = T)
hypervolume(data, 10, bandwidth = 1#
  quantile = 0.95, name = NULL, #
  verbose = T, warnings = T)
hypervolume(data, 10, bandwidth = 1#
  quantile = 0.95, name = NULL, warnings = T)
hypervolume(data, 10, bandwidth = c(0.5)#
  quantile = c(0.95), name = NULL, warnings = T)
hypervolume(data, 10,0.5,#
  quantile = c(0.95), name = NULL, warnings = T)
ff <- hypervolume(data, 10,0.5,#
  quantile = c(0.95), name = NULL, warnings = T)
ff <- hypervolume(data, 10,1,#
  quantile = c(1), name = NULL, warnings = T)
ff <- hypervolume(data, 100,1,#
  quantile = c(1), name = NULL, warnings = T)
ff <- hypervolume(data, 100,10,#
  quantile = c(1), name = NULL, warnings = T)
ff <- hypervolume(data, 100,10,#
  quantile = c(0.95), name = NULL, warnings = T)
ff <- hypervolume(data, reps=1000,bandwidth=0.2)
data(iris)
iris
data
rm(data)
data(iris)
hv1 <- hypervolume(subset(iris, Species=="setosa")[,1:4],reps=1000,bandwidth=0.2)
data.z <- data.frame(c(z1,z2,z3,z4))
data.z
data.z <- data.frame(z1,z2,z3,z4)
data.z
hv1 <- hypervolume(data.z,reps=1000,bandwidth=0.2)
hv1
hv1 <- hypervolume(data.z,reps=10,bandwidth=0.2)
hv1
plot(hv1)
hv1 <- hypervolume(data.z,reps=10,bandwidth=0.9)
plot(hv1)
hv9 <- hypervolume(data.z,reps=10,bandwidth=0.9)
hv1 <- hypervolume(data.z,reps=10,bandwidth=0.1)
plot(hv1)
dev.new(hv2)
dev.new()
dev.new(hv1)
plot(hv2)
plot(hv9)
source("t.rex.function.R")
rm(list=ls())#
graphics.off()#
#
source("t.rex.function.R")#
#These are all the inputs to the model. must are put in as default but still no harm in directly expressing#
est.type <- c("muscle") # from one of c("graeme","COT.hip", "COT.muscle.vol"). these are the different approaches to calulating the t.rex metabolic rate. the two COT are cost of transport types used by Pontzer et al 2009 and are probably better. I have hip here but the muscl one (which is higher) is as good an estimate really.#
#
metabolic.type <- c("endo") # from one of c("endo","ecto") unless doing Graemes apporach leave this on endo#
#walking.speed <- c(2.5) # meters per second. This is now calulated in the function based on mass and the scaling in Pontzer#
#
hip.hight <- c(264) # in cm. this is for #
#
#set up the mass range#
mass <- seq(10,10000,10) # in kg
detection.distance <- c(2000) # in meters#
#
search.time <- c(0.5) #amount of time searching#
#
bone.energy.content <- c(6700000) # in joules/kg#
#
flesh.energy.content <- c(7000000)#in joules/kg #
#
carcass.mass.density <- c(4.38) # kg/km#
#
theropod.size.bin <- c(20.6,58.3,1123,5347) #theropod size bins from carbone can include other dino distributions such as dino park#
#for dino park#
#for#
#
herbivor.size.bin <- c(75,216,700,2500,5000,8500,25000) #herbivour size bins from carbone can include other dino distributions such as dino park#
#
assimilation.effeciency <- c(0.75) # amount of energy through assimilation
competition <- c("absent") #whether to include compition or not. currenty very crudly coded as linear increase from 0% at lowest body size to 100% at max body size. "absent" if compitition is not to be included "present" if it is#
#
percent.flesh.available <- c(0.5) #how much flesh should be available, 0 if just a bone scavanger.
create vectors of area searched#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed
create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j
Energy.balance <-  daily.km2.search*energy.dens.km.j - Tot.daily.energy.consumption.j
rm(list=ls())#
graphics.off()#
#
source("t.rex.function.R")#
#These are all the inputs to the model. must are put in as default but still no harm in directly expressing#
est.type <- c("muscle") # from one of c("graeme","COT.hip", "COT.muscle.vol"). these are the different approaches to calulating the t.rex metabolic rate. the two COT are cost of transport types used by Pontzer et al 2009 and are probably better. I have hip here but the muscl one (which is higher) is as good an estimate really.#
#
metabolic.type <- c("endo") # from one of c("endo","ecto") unless doing Graemes apporach leave this on endo#
#walking.speed <- c(2.5) # meters per second. This is now calulated in the function based on mass and the scaling in Pontzer#
#
hip.hight <- c(264) # in cm. this is for #
#
#set up the mass range#
mass <- seq(10,10000,10) # in kg
detection.distance <- c(2000) # in meters#
#
search.time <- c(0.5) #amount of time searching#
#
bone.energy.content <- c(6700000) # in joules/kg#
#
flesh.energy.content <- c(7000000)#in joules/kg #
#
carcass.mass.density <- c(4.38) # kg/km#
#
theropod.size.bin <- c(20.6,58.3,1123,5347) #theropod size bins from carbone can include other dino distributions such as dino park#
#for dino park#
#for#
#
herbivor.size.bin <- c(75,216,700,2500,5000,8500,25000) #herbivour size bins from carbone can include other dino distributions such as dino park#
#
assimilation.effeciency <- c(0.75) # amount of energy through assimilation#
#
competition <- c("absent") #whether to include compition or not. currenty very crudly coded as linear increase from 0% at lowest body size to 100% at max body size. "absent" if compitition is not to be included "present" if it is#
#
percent.flesh.available <- c(0.5) #how much flesh should be available, 0 if just a bone scavanger.
create vectors of area searched#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
#
#quick energy balance with set parameters above#
Energy.balance <-  daily.km2.search*energy.dens.km.j - Tot.daily.energy.consumption.j
plot(Energy.balance~mass)
Set up the terpod dependent varibles#
#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
#Set up lapply across a series if envirnmental densities to give availble energy.#
#
carcass.mass.density <- c(seq(0,50,0.5))#
#
avail.energy <- lapply(carcass.mass.density, function(carcass.mass.density) energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7)) )#
#
energy.dens.km.j <- avail.energy[]#
#
Energy.balance <- matrix(0, nrow = c(length(daily.km2.search)), ncol = c(length(carcass.mass.density)))#
for(i in 1:(length(carcass.mass.density))){#
Energy.balance[,i] <-  daily.km2.search*(as.numeric(energy.dens.km.j[[i]][])) - Tot.daily.energy.consumption.j#
}#
#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~carcass.mass.density, col = "white", xlab= "Density of carcasses (kg/km2)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~carcass.mass.density, col = "red", lwd = "2")
Set up lapply across detection distances#
detection.distance <- c(seq(0,2000,100))#
carcass.mass.density <- c(4.38) # kg/km#
searched <- lapply(detection.distance, function(detection.distance) area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000)))#
#
walking.speed <-  data.frame(searched[[1]]["walking.speed"])#
#
daily.km2.search <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
daily.km2.search[i] <-  searched[[i]]["daily.km2.search"]#
}#
#
###Set up the terpod dependent varibles#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
#the output.is ver annoying here as the names are not changing#
Tot.daily.energy.consumption.j <- pontz.energy$walking.speed.1#
#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
Energy.balance <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
Energy.balance[,i] <-  daily.km2.search[[i]][]*energy.dens.km.j - Tot.daily.energy.consumption.j#
}#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~ detection.distance, col = "white", xlab= "Density of carcasses (kg/km2)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~ detection.distance, col = "red", lwd = "2")
Set up lapply across detection distances#
detection.distance <- c(seq(0,2000,100))#
carcass.mass.density <- c(4.38) # kg/km#
searched <- lapply(detection.distance, function(detection.distance) area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000)))#
#
walking.speed <-  data.frame(searched[[1]]["walking.speed"])#
#
daily.km2.search <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
daily.km2.search[i] <-  searched[[i]]["daily.km2.search"]#
}#
#
###Set up the terpod dependent varibles#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
#the output.is ver annoying here as the names are not changing#
Tot.daily.energy.consumption.j <- pontz.energy$walking.speed.1#
#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(1), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
Energy.balance <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
Energy.balance[,i] <-  daily.km2.search[[i]][]*energy.dens.km.j - Tot.daily.energy.consumption.j#
}#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~ detection.distance, col = "white", xlab= "Density of carcasses (kg/km2)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~ detection.distance, col = "red", lwd = "2")
---------------Scaling between max.size and detection distance------------###########################
#Set up lapply across detection distances#
detection.distance <- c(seq(0,2000,100))#
carcass.mass.density <- c(4.38) # kg/km#
searched <- lapply(detection.distance, function(detection.distance) area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000)))#
#
walking.speed <-  data.frame(searched[[1]]["walking.speed"])#
#
daily.km2.search <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
daily.km2.search[i] <-  searched[[i]]["daily.km2.search"]#
}#
#
###Set up the terpod dependent varibles#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
#the output.is ver annoying here as the names are not changing#
Tot.daily.energy.consumption.j <- pontz.energy$walking.speed.1#
#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
Energy.balance <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
Energy.balance[,i] <-  daily.km2.search[[i]][]*energy.dens.km.j - Tot.daily.energy.consumption.j#
}#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~ detection.distance, col = "white", xlab= "Detection distance (m)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~ detection.distance, col = "red", lwd = "2")
---------------Scaling between max.size and detection distance------------###########################
#Set up lapply across detection distances#
detection.distance <- c(seq(0,2000,100))#
carcass.mass.density <- c(4.38) # kg/km#
searched <- lapply(detection.distance, function(detection.distance) area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000)))#
#
walking.speed <-  data.frame(searched[[1]]["walking.speed"])#
#
daily.km2.search <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
daily.km2.search[i] <-  searched[[i]]["daily.km2.search"]#
}#
#
###Set up the terpod dependent varibles#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
#the output.is ver annoying here as the names are not changing#
Tot.daily.energy.consumption.j <- pontz.energy$walking.speed.1#
#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0.5), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
Energy.balance <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
Energy.balance[,i] <-  daily.km2.search[[i]][]*energy.dens.km.j - Tot.daily.energy.consumption.j#
}#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~ detection.distance, col = "white", xlab= "Detection distance (m)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~ detection.distance, col = "red", lwd = "2")
----------------------------------###########################
############Free parameter models using lapply###########################
############----------------------------------###########################
#
############---------------Scaling between max.size and carcass.density------------###########################
###Set up the terpod dependent varibles#
#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
#Set up lapply across a series if envirnmental densities to give availble energy.#
#
carcass.mass.density <- c(seq(0,50,0.5))#
#
avail.energy <- lapply(carcass.mass.density, function(carcass.mass.density) energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0.5), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7)) )#
#
energy.dens.km.j <- avail.energy[]#
#
Energy.balance <- matrix(0, nrow = c(length(daily.km2.search)), ncol = c(length(carcass.mass.density)))#
for(i in 1:(length(carcass.mass.density))){#
Energy.balance[,i] <-  daily.km2.search*(as.numeric(energy.dens.km.j[[i]][])) - Tot.daily.energy.consumption.j#
}#
#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~carcass.mass.density, col = "white", xlab= "Density of carcasses (kg/km2)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~carcass.mass.density, col = "red", lwd = "2")
----------------------------------###########################
############Free parameter models using lapply###########################
############----------------------------------###########################
#
############---------------Scaling between max.size and carcass.density------------###########################
###Set up the terpod dependent varibles#
#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
#Set up lapply across a series if envirnmental densities to give availble energy.#
#
carcass.mass.density <- c(seq(0,50,0.5))#
#
avail.energy <- lapply(carcass.mass.density, function(carcass.mass.density) energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0.1), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7)) )#
#
energy.dens.km.j <- avail.energy[]#
#
Energy.balance <- matrix(0, nrow = c(length(daily.km2.search)), ncol = c(length(carcass.mass.density)))#
for(i in 1:(length(carcass.mass.density))){#
Energy.balance[,i] <-  daily.km2.search*(as.numeric(energy.dens.km.j[[i]][])) - Tot.daily.energy.consumption.j#
}#
#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~carcass.mass.density, col = "white", xlab= "Density of carcasses (kg/km2)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~carcass.mass.density, col = "red", lwd = "2")
rm(list=ls())#
graphics.off()#
#
source("t.rex.function.R")#
#These are all the inputs to the model. must are put in as default but still no harm in directly expressing#
est.type <- c("muscle") # from one of c("graeme","COT.hip", "COT.muscle.vol"). these are the different approaches to calulating the t.rex metabolic rate. the two COT are cost of transport types used by Pontzer et al 2009 and are probably better. I have hip here but the muscl one (which is higher) is as good an estimate really.#
#
metabolic.type <- c("endo") # from one of c("endo","ecto") unless doing Graemes apporach leave this on endo#
#walking.speed <- c(2.5) # meters per second. This is now calulated in the function based on mass and the scaling in Pontzer#
#
hip.hight <- c(264) # in cm. this is for #
#
#set up the mass range#
mass <- seq(10,10000,10) # in kg#
#
detection.distance <- c(2000) # in meters#
#
search.time <- c(0.5) #amount of time searching#
#
bone.energy.content <- c(6700000) # in joules/kg#
#
flesh.energy.content <- c(7000000)#in joules/kg #
#
carcass.mass.density <- c(4.38) # kg/km#
#
theropod.size.bin <- c(20.6,58.3,1123,5347) #theropod size bins from carbone can include other dino distributions such as dino park#
#for dino park#
#for#
#
herbivor.size.bin <- c(75,216,700,2500,5000,8500,25000) #herbivour size bins from carbone can include other dino distributions such as dino park#
#
assimilation.effeciency <- c(0.75) # amount of energy through assimilation#
#
competition <- c("absent") #whether to include compition or not. currenty very crudly coded as linear increase from 0% at lowest body size to 100% at max body size. "absent" if compitition is not to be included "present" if it is#
#
percent.flesh.available <- c(0.5) #how much flesh should be available, 0 if just a bone scavanger.#
#create vectors of area searched#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
#
#quick energy balance with set parameters above#
Energy.balance <-  daily.km2.search*energy.dens.km.j - Tot.daily.energy.consumption.j
plot(Energy.balance~mass)
---------------Scaling between max.size and carcass.density------------###########################
###Set up the terpod dependent varibles#
#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
#Set up lapply across a series if envirnmental densities to give availble energy.#
#
carcass.mass.density <- c(seq(0,50,0.5))#
#
avail.energy <- lapply(carcass.mass.density, function(carcass.mass.density) energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7)) )#
#
energy.dens.km.j <- avail.energy[]#
#
Energy.balance <- matrix(0, nrow = c(length(daily.km2.search)), ncol = c(length(carcass.mass.density)))#
for(i in 1:(length(carcass.mass.density))){#
Energy.balance[,i] <-  daily.km2.search*(as.numeric(energy.dens.km.j[[i]][])) - Tot.daily.energy.consumption.j#
}#
#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~carcass.mass.density, col = "white", xlab= "Density of carcasses (kg/km2)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~carcass.mass.density, col = "red", lwd = "2")
Set up the terpod dependent varibles#
#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
#Set up lapply across a series if envirnmental densities to give availble energy.#
#
carcass.mass.density <- c(seq(0,50,0.5))#
#
avail.energy <- lapply(carcass.mass.density, function(carcass.mass.density) energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0.1), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7)) )#
#
energy.dens.km.j <- avail.energy[]#
#
Energy.balance <- matrix(0, nrow = c(length(daily.km2.search)), ncol = c(length(carcass.mass.density)))#
for(i in 1:(length(carcass.mass.density))){#
Energy.balance[,i] <-  daily.km2.search*(as.numeric(energy.dens.km.j[[i]][])) - Tot.daily.energy.consumption.j#
}#
#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~carcass.mass.density, col = "white", xlab= "Density of carcasses (kg/km2)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~carcass.mass.density, col = "red", lwd = "2")
Set up the terpod dependent varibles#
#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
#Set up lapply across a series if envirnmental densities to give availble energy.#
#
carcass.mass.density <- c(seq(0,50,0.5))#
#
avail.energy <- lapply(carcass.mass.density, function(carcass.mass.density) energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0.5), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7)) )#
#
energy.dens.km.j <- avail.energy[]#
#
Energy.balance <- matrix(0, nrow = c(length(daily.km2.search)), ncol = c(length(carcass.mass.density)))#
for(i in 1:(length(carcass.mass.density))){#
Energy.balance[,i] <-  daily.km2.search*(as.numeric(energy.dens.km.j[[i]][])) - Tot.daily.energy.consumption.j#
}#
#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~carcass.mass.density, col = "white", xlab= "Density of carcasses (kg/km2)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~carcass.mass.density, col = "red", lwd = "2")
---------------Scaling between max.size and detection distance------------###########################
#Set up lapply across detection distances#
detection.distance <- c(seq(0,2000,100))#
carcass.mass.density <- c(4.38) # kg/km#
searched <- lapply(detection.distance, function(detection.distance) area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000)))#
#
walking.speed <-  data.frame(searched[[1]]["walking.speed"])#
#
daily.km2.search <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
daily.km2.search[i] <-  searched[[i]]["daily.km2.search"]#
}#
#
###Set up the terpod dependent varibles#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
#the output.is ver annoying here as the names are not changing#
Tot.daily.energy.consumption.j <- pontz.energy$walking.speed.1#
#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
Energy.balance <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
Energy.balance[,i] <-  daily.km2.search[[i]][]*energy.dens.km.j - Tot.daily.energy.consumption.j#
}#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~ detection.distance, col = "white", xlab= "Detection distance (m)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~ detection.distance, col = "red", lwd = "2")
---------------Scaling between max.size and detection distance------------###########################
#Set up lapply across detection distances#
detection.distance <- c(seq(0,2000,100))#
carcass.mass.density <- c(4.38) # kg/km#
searched <- lapply(detection.distance, function(detection.distance) area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000)))#
#
walking.speed <-  data.frame(searched[[1]]["walking.speed"])#
#
daily.km2.search <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
daily.km2.search[i] <-  searched[[i]]["daily.km2.search"]#
}#
#
###Set up the terpod dependent varibles#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
#the output.is ver annoying here as the names are not changing#
Tot.daily.energy.consumption.j <- pontz.energy$walking.speed.1#
#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0.5), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
Energy.balance <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
Energy.balance[,i] <-  daily.km2.search[[i]][]*energy.dens.km.j - Tot.daily.energy.consumption.j#
}#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~ detection.distance, col = "white", xlab= "Detection distance (m)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~ detection.distance, col = "red", lwd = "2")
---------------Scaling between max.size and detection distance------------###########################
#Set up lapply across detection distances#
detection.distance <- c(seq(0,2000,100))#
carcass.mass.density <- c(4.38) # kg/km#
searched <- lapply(detection.distance, function(detection.distance) area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000)))#
#
walking.speed <-  data.frame(searched[[1]]["walking.speed"])#
#
daily.km2.search <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
daily.km2.search[i] <-  searched[[i]]["daily.km2.search"]#
}#
#
###Set up the terpod dependent varibles#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
#the output.is ver annoying here as the names are not changing#
Tot.daily.energy.consumption.j <- pontz.energy$walking.speed.1#
#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0.§), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
Energy.balance <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
Energy.balance[,i] <-  daily.km2.search[[i]][]*energy.dens.km.j - Tot.daily.energy.consumption.j#
}#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~ detection.distance, col = "white", xlab= "Detection distance (m)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~ detection.distance, col = "red", lwd = "2")
---------------Scaling between max.size and detection distance------------###########################
#Set up lapply across detection distances#
detection.distance <- c(seq(0,2000,100))#
carcass.mass.density <- c(4.38) # kg/km#
searched <- lapply(detection.distance, function(detection.distance) area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000)))#
#
walking.speed <-  data.frame(searched[[1]]["walking.speed"])#
#
daily.km2.search <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
daily.km2.search[i] <-  searched[[i]]["daily.km2.search"]#
}#
#
###Set up the terpod dependent varibles#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
#the output.is ver annoying here as the names are not changing#
Tot.daily.energy.consumption.j <- pontz.energy$walking.speed.1#
#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0.1), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
Energy.balance <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
Energy.balance[,i] <-  daily.km2.search[[i]][]*energy.dens.km.j - Tot.daily.energy.consumption.j#
}#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~ detection.distance, col = "white", xlab= "Detection distance (m)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~ detection.distance, col = "red", lwd = "2")
(carcass.energy.avail.kg
)
energy.dens.km.j
bone.mass.herbivors <-  0.065*(herbivor.size.bin^1.09)# from mammal scaling #
		flesh.mass.herbivours <- herbivor.size.bin - bone.mass.herbivors#
		bone.energy.herb <-  bone.mass.herbivors*bone.energy.content #energy in each size bim from bones#
		flesh.energy.herb <-  flesh.mass.herbivours*flesh.energy.content #energy in each size bim from flesh#
		carcass.energy.avail <- bone.energy.herb + flesh.energy.herb*percent.flesh.available #energy in each size bim from complet carcass#
		per.individual.carcass.energy.avail <- carcass.energy.avail*assimilation.effeciency*competativly.available#
		carcass.energy.avail.kg <- per.individual.carcass.energy.avail/herbivor.size.bin #energy per kg
bone.mass.herbivors <-  0.065*(herbivor.size.bin^1.09)# from mammal scaling #
		flesh.mass.herbivours <- herbivor.size.bin - bone.mass.herbivors#
		bone.energy.herb <-  bone.mass.herbivors*bone.energy.content #energy in each size bim from bones#
		flesh.energy.herb <-  flesh.mass.herbivours*flesh.energy.content #energy in each size bim from flesh#
		carcass.energy.avail <- bone.energy.herb + flesh.energy.herb*percent.flesh.available #energy in each size bim from complet carcass#
		per.individual.carcass.energy.avail <- carcass.energy.avail*assimilation.effeciency#
		carcass.energy.avail.kg <- per.individual.carcass.energy.avail/herbivor.size.bin #energy per kg
energy.dens.km.j/carcass.energy.avail.kg
energy.dens.km.j/sum(carcass.energy.avail.kg)
Set up the terpod dependent varibles#
#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
#Set up lapply across a series if envirnmental densities to give availble energy.#
#
carcass.mass.density <- c(seq(0,50,0.5))#
#
avail.energy <- lapply(carcass.mass.density, function(carcass.mass.density) energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7)) )#
#
energy.dens.km.j <- avail.energy[]#
#
Energy.balance <- matrix(0, nrow = c(length(daily.km2.search)), ncol = c(length(carcass.mass.density)))#
for(i in 1:(length(carcass.mass.density))){#
Energy.balance[,i] <-  daily.km2.search*(as.numeric(energy.dens.km.j[[i]][])) - Tot.daily.energy.consumption.j#
}#
#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~carcass.mass.density, col = "white", xlab= "Density of carcasses (kg/km2)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~carcass.mass.density, col = "red", lwd = "2")
Set up lapply across detection distances#
detection.distance <- c(seq(0,2000,100))#
carcass.mass.density <- c(4.38) # kg/km#
searched <- lapply(detection.distance, function(detection.distance) area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000)))#
#
walking.speed <-  data.frame(searched[[1]]["walking.speed"])#
#
daily.km2.search <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
daily.km2.search[i] <-  searched[[i]]["daily.km2.search"]#
}#
#
###Set up the terpod dependent varibles#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
#the output.is ver annoying here as the names are not changing#
Tot.daily.energy.consumption.j <- pontz.energy$walking.speed.1#
#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
Energy.balance <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
Energy.balance[,i] <-  daily.km2.search[[i]][]*energy.dens.km.j - Tot.daily.energy.consumption.j#
}#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~ detection.distance, col = "white", xlab= "Detection distance (m)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~ detection.distance, col = "red", lwd = "2")
source("t.rex.function.R")#
#These are all the inputs to the model. must are put in as default but still no harm in directly expressing#
est.type <- c("muscle") # from one of c("graeme","COT.hip", "COT.muscle.vol"). these are the different approaches to calulating the t.rex metabolic rate. the two COT are cost of transport types used by Pontzer et al 2009 and are probably better. I have hip here but the muscl one (which is higher) is as good an estimate really.#
#
metabolic.type <- c("endo") # from one of c("endo","ecto") unless doing Graemes apporach leave this on endo#
#walking.speed <- c(2.5) # meters per second. This is now calulated in the function based on mass and the scaling in Pontzer#
#
hip.hight <- c(264) # in cm. this is for #
#
#set up the mass range#
mass <- seq(10,10000,10) # in kg#
#
detection.distance <- c(2000) # in meters#
#
search.time <- c(0.5) #amount of time searching#
#
bone.energy.content <- c(6700000) # in joules/kg#
#
flesh.energy.content <- c(7000000)#in joules/kg #
#
carcass.mass.density <- c(4.38) # kg/km#
#
theropod.size.bin <- c(20.6,58.3,1123,5347) #theropod size bins from carbone can include other dino distributions such as dino park#
#for dino park#
#for#
#
herbivor.size.bin <- c(75,216,700,2500,5000,8500,25000) #herbivour size bins from carbone can include other dino distributions such as dino park#
#
assimilation.effeciency <- c(0.75) # amount of energy through assimilation#
#
competition <- c("absent") #whether to include compition or not. currenty very crudly coded as linear increase from 0% at lowest body size to 100% at max body size. "absent" if compitition is not to be included "present" if it is#
#
percent.flesh.available <- c(0.5) #how much flesh should be available, 0 if just a bone scavanger.#
#create vectors of area searched#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
#
#quick energy balance with set parameters above#
Energy.balance <-  daily.km2.search*energy.dens.km.j - Tot.daily.energy.consumption.j
plot(Energy.balance~mass)
----------------------------------###########################
############Free parameter models using lapply###########################
############----------------------------------###########################
#
############---------------Scaling between max.size and carcass.density------------###########################
###Set up the terpod dependent varibles#
#
searched <- area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000))#
daily.km2.search <- searched$daily.km2.search#
walking.speed <- searched$walking.speed#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
Tot.daily.energy.consumption.j <- pontz.energy$Tot.daily.energy.consumption.j#
#Set up lapply across a series if envirnmental densities to give availble energy.#
#
carcass.mass.density <- c(seq(0,50,0.5))#
#
avail.energy <- lapply(carcass.mass.density, function(carcass.mass.density) energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7)) )#
#
energy.dens.km.j <- avail.energy[]#
#
Energy.balance <- matrix(0, nrow = c(length(daily.km2.search)), ncol = c(length(carcass.mass.density)))#
for(i in 1:(length(carcass.mass.density))){#
Energy.balance[,i] <-  daily.km2.search*(as.numeric(energy.dens.km.j[[i]][])) - Tot.daily.energy.consumption.j#
}#
#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~carcass.mass.density, col = "white", xlab= "Density of carcasses (kg/km2)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~carcass.mass.density, col = "red", lwd = "2")
Using pontzers model to calulate energy expenditure#
#
pontz.energy.exp <- function(mass, walking.speed, est.type = c("hip","muscle"), hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
{#
	if(est.type == "hip")#
		{#
		resting.metabolic.rate <- 4.12*(mass^0.69) #baesed on mammals#
		#need an equation of mass hip higth scaling.#
		cost.of.transport <-  90.284*(hip.hight^(-0.77)) #
		Searching.energy.cost.W <-  (cost.of.transport*mass)*walking.speed#
#
		Tot.energy.consumption.watts <- resting.metabolic.rate + search.time*Searching.energy.cost.W#
		Tot.daily.energy.consumption.j <-  Tot.energy.consumption.watts*60*60*24 #joules per day#
		}#
		else {#
			if(est.type == "muscle")#
				{#
					resting.metabolic.rate <- 4.12*(mass^0.69) #Mammals from White et al 2009 (uses PGLS)#
					cost.of.transport <- (0.0029*(V.musc) + 0.0598)*20.1#
					Searching.energy.cost.W <- (cost.of.transport*mass)*walking.speed #cost of whole animal to search in Watts#
					Tot.energy.consumption.watts <- resting.metabolic.rate + search.time*Searching.energy.cost.W#
					Tot.daily.energy.consumption.j <-  Tot.energy.consumption.watts*60*60*24 #joules per day#
				}#
			}#
return(data.frame(resting.metabolic.rate, Searching.energy.cost.W, Tot.daily.energy.consumption.j))#
}#
#function to calulate the enrgy available in the envirnment.#
#
energy.available <- function(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = c(4.38), number.day.carcass.available = c(7))#
		{#
		bone.mass.herbivors <-  0.065*(herbivor.size.bin^1.09)# from mammal scaling #
		flesh.mass.herbivours <- herbivor.size.bin - bone.mass.herbivors#
		bone.energy.herb <-  bone.mass.herbivors*bone.energy.content #energy in each size bim from bones#
		flesh.energy.herb <-  flesh.mass.herbivours*flesh.energy.content #energy in each size bim from flesh#
		carcass.energy.avail <- bone.energy.herb + flesh.energy.herb*percent.flesh.available #energy in each size bim from complet carcass#
		per.individual.carcass.energy.avail <- carcass.energy.avail*assimilation.effeciency*competativly.available#
		carcass.energy.avail.kg <- per.individual.carcass.energy.avail/herbivor.size.bin #energy per kg #
#
		energy.dens.km.j <- sum((carcass.mass.density*number.day.carcass.available)*(carcass.energy.avail.kg/length(herbivor.size.bin))) #density of energy avalable to t.rex uniformly spread.#
		return(data.frame(energy.dens.km.j))#
		}
---------------Scaling between max.size and detection distance------------###########################
#Set up lapply across detection distances#
detection.distance <- c(seq(0,2000,100))#
carcass.mass.density <- c(4.38) # kg/km#
searched <- lapply(detection.distance, function(detection.distance) area.searched(mass = mass, detection.distance = detection.distance, search.time =c(0.5), search.speed = c(1,1.6,1.7,1.9,2.5), theropod.body.sizes = c(20,210,430,1400,6000)))#
#
walking.speed <-  data.frame(searched[[1]]["walking.speed"])#
#
daily.km2.search <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
daily.km2.search[i] <-  searched[[i]]["daily.km2.search"]#
}#
#
###Set up the terpod dependent varibles#
#
#create vectors of energy used#
pontz.energy <- pontz.energy.exp(mass = mass, walking.speed = walking.speed, est.type = est.type, hip.hight = c(264), V.musc = c(44.1), search.time = c(0.5))#
#
#the output.is ver annoying here as the names are not changing#
Tot.daily.energy.consumption.j <- pontz.energy$walking.speed.1#
#
avail.energy <- energy.available(bone.energy.content = c(6700000), flesh.energy.content = c(7000000), herbivor.size.bin = c(75,216,700,2500,5000,8500,25000), percent.flesh.available = c(0), assimilation.effeciency = c(0.75), competativly.available = c(1), carcass.mass.density = carcass.mass.density, number.day.carcass.available = c(7))#
#
energy.dens.km.j <- avail.energy$energy.dens.km.j#
Energy.balance <- matrix(0, nrow = c(length(mass)), ncol = c(length(detection.distance)))#
for(i in 1:(length(detection.distance))){#
Energy.balance[,i] <-  daily.km2.search[[i]][]*energy.dens.km.j - Tot.daily.energy.consumption.j#
}#
#to calulate the maximum inflection #
energy.output <- data.frame(Energy.balance,mass)#
#
opt.size <- matrix(0, nrow = c(length(energy.output[1,])-1))#
for(i in 1:(length(energy.output[1,])-1)){#
opt.size[i] <- energy.output[(max(energy.output[,i]) == energy.output[,i]),"mass"]#
}#
#
#plot these out#
plot(opt.size~ detection.distance, col = "white", xlab= "Detection distance (m)", ylab = "Optimum body size (kg)")#
#
lines(opt.size~ detection.distance, col = "red", lwd = "2")
carr_density <- 4.38 ## kg/km^2/day from Ruxton#
area <- 2500 ## km^2 in the NetLogo model #
area * carr_density ## = 10950 kg/day in 2500km^2#
## the categories of the carrion by mass (kg)#
mass_cat <- c(75, 216, 700, 2500, 5000, 8500, 25000)#
## the percentage that each of the mass categories represents#
mass_cat_percent <- c(49.3, 36.8, 6, 6.7, 0.6, 0.4, 0.2)#
## 49.3% if the 10950 is pacakged up in 75kg carcasses#
10950*mass_cat_percent/100 #
x <- c(5398.35, 4029.6, 657.00, 733.65, 65.70, 43.80, 21.90)#
## So here for example 5398.35kg of the 10950kg total is packaged in 75kg carcasses#
x/mass_cat#
## (71.978 18.65  0.938571429  0.29346  0.01314  0.005152941  0.000876)
mass_cat <- c(75, 216, 700, 2500, 5000, 8500, 25000)
mass_cat_percent <- c(1/7, 1/7, 1/7, 1/7, 1/7, 1/7, 1/7)
10950*mass_cat_percent
sum(10950*mass_cat_percent)
10950*mass_cat_percent/100
c(49.3, 36.8, 6, 6.7, 0.6, 0.4, 0.2)/100
10950*mass_cat_percent/100
10950*mass_cat_percent
d <- 10950*mass_cat_percent
sum(d)
1564.286/75
1564.286
2.5*60
2.5*60*60
12*9
ind_data <- read.csv("full_gut_small_comp_master_22_june.csv",sep=",", header = T)
enr_day <- matrix(0, nrow = c(1000) , ncol = c(4))#
enr_gain <- matrix(0, nrow = c(1000) , ncol = c(4))
for(i in 1:200){#
	enr_day[i,1] <- ind_data[ind_data$mass == "100", "energy"][i] #
	enr_day[i,2] <- ind_data[ind_data$mass == "1000", "energy"][i]#
	enr_day[i,3] <- ind_data[ind_data$mass == "4000", "energy"][i]#
#
	enr_day[i,5] <- ind_data[ind_data$mass == "10000", "energy"][i]#
	enr_gain[i,1] <- (ind_data[ind_data$mass == "100", "energy"][i]*0.8*0.23) - 19243.828#
	enr_gain[i,2] <- (ind_data[ind_data$mass == "1000", "energy"][i]*0.8*0.23)  - 158562.583#
	enr_gain[i,3] <- (ind_data[ind_data$mass == "2000", "energy"][i]*0.8*0.23)  -  299170.140*2#
#
	enr_gain[i,5] <- (ind_data[ind_data$mass == "10000", "energy"][i]*0.8*0.23)  - 1306521.754#
}
for(i in 1:200){#
	enr_day[i,1] <- ind_data[ind_data$mass == "100", "energy"][i] #
	enr_day[i,2] <- ind_data[ind_data$mass == "1000", "energy"][i]#
	enr_day[i,3] <- ind_data[ind_data$mass == "4000", "energy"][i]#
#
	enr_day[i,4] <- ind_data[ind_data$mass == "10000", "energy"][i]#
	enr_gain[i,1] <- (ind_data[ind_data$mass == "100", "energy"][i]*0.8*0.23) - 19243.828#
	enr_gain[i,2] <- (ind_data[ind_data$mass == "1000", "energy"][i]*0.8*0.23)  - 158562.583#
	enr_gain[i,3] <- (ind_data[ind_data$mass == "2000", "energy"][i]*0.8*0.23)  -  299170.140*2#
#
	enr_gain[i,4] <- (ind_data[ind_data$mass == "10000", "energy"][i]*0.8*0.23)  - 1306521.754#
}
energy_day <- enr_day[10:200,]#
energy_gain <- enr_gain[10:200,]
en.sum <- c(sum(energy_gain[,1]),sum(energy_gain[,2]),sum(energy_gain[,3]),sum(energy_gain[,4]),sum(energy_gain[,5]))#
en.day.sum <- c(sum(energy_day[,1]),sum(energy_day[,2]),sum(energy_day[,3]),sum(energy_day[,4]),sum(energy_day[,5]))
en.sum <- c(sum(energy_gain[,1]),sum(energy_gain[,2]),sum(energy_gain[,3]),sum(energy_gain[,4]))#
en.day.sum <- c(sum(energy_day[,1]),sum(energy_day[,2]),sum(energy_day[,3]),sum(energy_day[,4]))
plot(en.sum~mass)
mass <- c(100,1000,4000,10000)
plot(en.sum~mass)
plot(en.day.sum~mass)
plot(en.sum~mass)
en.sum
energy_gain
for(i in 1:200){#
	enr_day[i,1] <- ind_data[ind_data$mass == "100", "energy"][i] #
	enr_day[i,2] <- ind_data[ind_data$mass == "1000", "energy"][i]#
	enr_day[i,3] <- ind_data[ind_data$mass == "4000", "energy"][i]#
#
	enr_day[i,4] <- ind_data[ind_data$mass == "10000", "energy"][i]#
	enr_gain[i,1] <- (ind_data[ind_data$mass == "100", "energy"][i]*0.8*0.23) - 19243.828#
	enr_gain[i,2] <- (ind_data[ind_data$mass == "1000", "energy"][i]*0.8*0.23)  - 158562.583#
	enr_gain[i,3] <- (ind_data[ind_data$mass == "2000", "energy"][i]*0.8*0.23)  -  (299170.140*2)#
#
	enr_gain[i,4] <- (ind_data[ind_data$mass == "10000", "energy"][i]*0.8*0.23)  - 1306521.754#
}
energy_day <- enr_day[10:200,]#
energy_gain <- enr_gain[10:200,]
en.sum <- c(sum(energy_gain[,1]),sum(energy_gain[,2]),sum(energy_gain[,3]),sum(energy_gain[,4]))#
en.day.sum <- c(sum(energy_day[,1]),sum(energy_day[,2]),sum(energy_day[,3]),sum(energy_day[,4]))
plot(en.sum~mass)
en.sum
for(i in 1:200){#
	enr_day[i,1] <- ind_data[ind_data$mass == "100", "energy"][i] #
	enr_day[i,2] <- ind_data[ind_data$mass == "1000", "energy"][i]#
	enr_day[i,3] <- ind_data[ind_data$mass == "4000", "energy"][i]#
#
	enr_day[i,4] <- ind_data[ind_data$mass == "10000", "energy"][i]#
	enr_gain[i,1] <- (ind_data[ind_data$mass == "100", "energy"][i]*0.8*0.23) - 19243.828#
	enr_gain[i,2] <- (ind_data[ind_data$mass == "1000", "energy"][i]*0.8*0.23)  - 158562.583#
	enr_gain[i,3] <- (ind_data[ind_data$mass == "4000", "energy"][i]*0.8*0.23)  -  (299170.140*2)#
#
	enr_gain[i,4] <- (ind_data[ind_data$mass == "10000", "energy"][i]*0.8*0.23)  - 1306521.754#
}
energy_day <- enr_day[10:200,]#
energy_gain <- enr_gain[10:200,]
en.sum <- c(sum(energy_gain[,1]),sum(energy_gain[,2]),sum(energy_gain[,3]),sum(energy_gain[,4]))#
en.day.sum <- c(sum(energy_day[,1]),sum(energy_day[,2]),sum(energy_day[,3]),sum(energy_day[,4]))
plot(en.sum~mass)
